package REST_Assured;

import BaseClass.BaseClassFactory;
import io.restassured.http.ContentType;
import org.apache.commons.collections.map.HashedMap;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.*;
import io.restassured.response.Response;
import java.lang.reflect.MalformedParameterizedTypeException;
import java.util.HashMap;
import java.util.Map;
import static org.hamcrest.Matchers.*;
import static io.restassured.matcher.RestAssuredMatchers.*;

public class Dummy_NodeJS_host_REST_API extends BaseClassFactory
{
    @Test
    public void GET()
    {
        given().
                get(NODE_JS + "/users").
                then().statusCode(200).log().all();
    }

    @Test
    public void POST_subjects()
    {
        //id will always be autogenerated
        HashMap<String, String> postcontent = new HashMap<String, String>();
        postcontent.put("name", "Vinay");


        given().contentType(ContentType.JSON).with().
                body(postcontent).when().
                post(NODE_JS + "/subjects");
    }

    @Test
    public void POST_Users()
    {
        //id will always be autogenerated
        HashMap<Object, Object> postcontent = new HashMap<Object, Object>();
        postcontent.put("firstName", "Ravi");
        postcontent.put("lastName", "CR");
        postcontent.put("subjectId", 1);


        given().contentType(ContentType.JSON).with().
                body(postcontent).when().
                post(NODE_JS + "/users");
    }

    @Test
    public void PUT_users()
    {
        HashMap<Object, Object> postcontent = new HashMap<Object, Object>();
        postcontent.put("firstName", "Sunil");
        postcontent.put("lastName", "Gaja");
        postcontent.put("subjectId", 1);

        given().contentType(ContentType.JSON).with().
                body(postcontent).when().
                put(NODE_JS + "/users/10");

    }

    @Test
    public void patch(){
        HashMap<Object, Object> postcontent = new HashMap<Object, Object>();
        postcontent.put("firstName", "Sunil Kumar");
        postcontent.put("lastName", "Gaja");
        postcontent.put("subjectId", 1);

        given().contentType(ContentType.JSON).with().
                body(postcontent).when().
                patch(NODE_JS + "/users/10");
    }

    @Test
    public void DELETE()
    {
        given().contentType(ContentType.JSON).with().
                delete(NODE_JS + "/users/9").
                then().statusCode(200);
    }
}
